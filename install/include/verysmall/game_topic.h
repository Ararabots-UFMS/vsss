// Generated by gencpp from file verysmall/game_topic.msg
// DO NOT EDIT!


#ifndef VERYSMALL_MESSAGE_GAME_TOPIC_H
#define VERYSMALL_MESSAGE_GAME_TOPIC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace verysmall
{
template <class ContainerAllocator>
struct game_topic_
{
  typedef game_topic_<ContainerAllocator> Type;

  game_topic_()
    : robot_roles()
    , game_state(0)  {
      robot_roles.assign(0);
  }
  game_topic_(const ContainerAllocator& _alloc)
    : robot_roles()
    , game_state(0)  {
  (void)_alloc;
      robot_roles.assign(0);
  }



   typedef boost::array<uint8_t, 3>  _robot_roles_type;
  _robot_roles_type robot_roles;

   typedef uint8_t _game_state_type;
  _game_state_type game_state;





  typedef boost::shared_ptr< ::verysmall::game_topic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::verysmall::game_topic_<ContainerAllocator> const> ConstPtr;

}; // struct game_topic_

typedef ::verysmall::game_topic_<std::allocator<void> > game_topic;

typedef boost::shared_ptr< ::verysmall::game_topic > game_topicPtr;
typedef boost::shared_ptr< ::verysmall::game_topic const> game_topicConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::verysmall::game_topic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::verysmall::game_topic_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace verysmall

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'verysmall': ['/home/marquesman/ararabots/src/verysmall/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::verysmall::game_topic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::verysmall::game_topic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::verysmall::game_topic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::verysmall::game_topic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::verysmall::game_topic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::verysmall::game_topic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::verysmall::game_topic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "609f49595bdc94fe57d847d3ac10e1c6";
  }

  static const char* value(const ::verysmall::game_topic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x609f49595bdc94feULL;
  static const uint64_t static_value2 = 0x57d847d3ac10e1c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::verysmall::game_topic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "verysmall/game_topic";
  }

  static const char* value(const ::verysmall::game_topic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::verysmall::game_topic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[3]     robot_roles\n\
uint8        game_state\n\
";
  }

  static const char* value(const ::verysmall::game_topic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::verysmall::game_topic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_roles);
      stream.next(m.game_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct game_topic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::verysmall::game_topic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::verysmall::game_topic_<ContainerAllocator>& v)
  {
    s << indent << "robot_roles[]" << std::endl;
    for (size_t i = 0; i < v.robot_roles.size(); ++i)
    {
      s << indent << "  robot_roles[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.robot_roles[i]);
    }
    s << indent << "game_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.game_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VERYSMALL_MESSAGE_GAME_TOPIC_H
