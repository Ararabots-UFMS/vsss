# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from verysmall/things_position.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import verysmall.msg

class things_position(genpy.Message):
  _md5sum = "e53313ec081a9c87ca55fbeaff276969"
  _type = "verysmall/things_position"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32[2]		 	        	ball_pos
float64[2]        				ball_vector
verysmall/five_robot_pos       	team_pos
verysmall/five_robot_vector    	team_vector
verysmall/five_robot_pos       	enemies_pos
verysmall/five_robot_vector   	enemies_vector
uint32[10]		 	        	robot_speed

================================================================================
MSG: verysmall/five_robot_pos
uint32[2]    robot_pos_1
uint32[2]    robot_pos_2
uint32[2]    robot_pos_3
uint32[2]    robot_pos_4
uint32[2]    robot_pos_5
================================================================================
MSG: verysmall/five_robot_vector
float64   robot_angle_vector_1
float64   robot_angle_vector_2
float64   robot_angle_vector_3
float64   robot_angle_vector_4
float64   robot_angle_vector_5"""
  __slots__ = ['ball_pos','ball_vector','team_pos','team_vector','enemies_pos','enemies_vector','robot_speed']
  _slot_types = ['uint32[2]','float64[2]','verysmall/five_robot_pos','verysmall/five_robot_vector','verysmall/five_robot_pos','verysmall/five_robot_vector','uint32[10]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ball_pos,ball_vector,team_pos,team_vector,enemies_pos,enemies_vector,robot_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(things_position, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ball_pos is None:
        self.ball_pos = [0] * 2
      if self.ball_vector is None:
        self.ball_vector = [0.] * 2
      if self.team_pos is None:
        self.team_pos = verysmall.msg.five_robot_pos()
      if self.team_vector is None:
        self.team_vector = verysmall.msg.five_robot_vector()
      if self.enemies_pos is None:
        self.enemies_pos = verysmall.msg.five_robot_pos()
      if self.enemies_vector is None:
        self.enemies_vector = verysmall.msg.five_robot_vector()
      if self.robot_speed is None:
        self.robot_speed = [0] * 10
    else:
      self.ball_pos = [0] * 2
      self.ball_vector = [0.] * 2
      self.team_pos = verysmall.msg.five_robot_pos()
      self.team_vector = verysmall.msg.five_robot_vector()
      self.enemies_pos = verysmall.msg.five_robot_pos()
      self.enemies_vector = verysmall.msg.five_robot_vector()
      self.robot_speed = [0] * 10

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_2I().pack(*self.ball_pos))
      buff.write(_get_struct_2d().pack(*self.ball_vector))
      buff.write(_get_struct_2I().pack(*self.team_pos.robot_pos_1))
      buff.write(_get_struct_2I().pack(*self.team_pos.robot_pos_2))
      buff.write(_get_struct_2I().pack(*self.team_pos.robot_pos_3))
      buff.write(_get_struct_2I().pack(*self.team_pos.robot_pos_4))
      buff.write(_get_struct_2I().pack(*self.team_pos.robot_pos_5))
      _x = self
      buff.write(_get_struct_5d().pack(_x.team_vector.robot_angle_vector_1, _x.team_vector.robot_angle_vector_2, _x.team_vector.robot_angle_vector_3, _x.team_vector.robot_angle_vector_4, _x.team_vector.robot_angle_vector_5))
      buff.write(_get_struct_2I().pack(*self.enemies_pos.robot_pos_1))
      buff.write(_get_struct_2I().pack(*self.enemies_pos.robot_pos_2))
      buff.write(_get_struct_2I().pack(*self.enemies_pos.robot_pos_3))
      buff.write(_get_struct_2I().pack(*self.enemies_pos.robot_pos_4))
      buff.write(_get_struct_2I().pack(*self.enemies_pos.robot_pos_5))
      _x = self
      buff.write(_get_struct_5d().pack(_x.enemies_vector.robot_angle_vector_1, _x.enemies_vector.robot_angle_vector_2, _x.enemies_vector.robot_angle_vector_3, _x.enemies_vector.robot_angle_vector_4, _x.enemies_vector.robot_angle_vector_5))
      buff.write(_get_struct_10I().pack(*self.robot_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.team_pos is None:
        self.team_pos = verysmall.msg.five_robot_pos()
      if self.team_vector is None:
        self.team_vector = verysmall.msg.five_robot_vector()
      if self.enemies_pos is None:
        self.enemies_pos = verysmall.msg.five_robot_pos()
      if self.enemies_vector is None:
        self.enemies_vector = verysmall.msg.five_robot_vector()
      end = 0
      start = end
      end += 8
      self.ball_pos = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 16
      self.ball_vector = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 8
      self.team_pos.robot_pos_1 = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 8
      self.team_pos.robot_pos_2 = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 8
      self.team_pos.robot_pos_3 = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 8
      self.team_pos.robot_pos_4 = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 8
      self.team_pos.robot_pos_5 = _get_struct_2I().unpack(str[start:end])
      _x = self
      start = end
      end += 40
      (_x.team_vector.robot_angle_vector_1, _x.team_vector.robot_angle_vector_2, _x.team_vector.robot_angle_vector_3, _x.team_vector.robot_angle_vector_4, _x.team_vector.robot_angle_vector_5,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 8
      self.enemies_pos.robot_pos_1 = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 8
      self.enemies_pos.robot_pos_2 = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 8
      self.enemies_pos.robot_pos_3 = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 8
      self.enemies_pos.robot_pos_4 = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 8
      self.enemies_pos.robot_pos_5 = _get_struct_2I().unpack(str[start:end])
      _x = self
      start = end
      end += 40
      (_x.enemies_vector.robot_angle_vector_1, _x.enemies_vector.robot_angle_vector_2, _x.enemies_vector.robot_angle_vector_3, _x.enemies_vector.robot_angle_vector_4, _x.enemies_vector.robot_angle_vector_5,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 40
      self.robot_speed = _get_struct_10I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.ball_pos.tostring())
      buff.write(self.ball_vector.tostring())
      buff.write(self.team_pos.robot_pos_1.tostring())
      buff.write(self.team_pos.robot_pos_2.tostring())
      buff.write(self.team_pos.robot_pos_3.tostring())
      buff.write(self.team_pos.robot_pos_4.tostring())
      buff.write(self.team_pos.robot_pos_5.tostring())
      _x = self
      buff.write(_get_struct_5d().pack(_x.team_vector.robot_angle_vector_1, _x.team_vector.robot_angle_vector_2, _x.team_vector.robot_angle_vector_3, _x.team_vector.robot_angle_vector_4, _x.team_vector.robot_angle_vector_5))
      buff.write(self.enemies_pos.robot_pos_1.tostring())
      buff.write(self.enemies_pos.robot_pos_2.tostring())
      buff.write(self.enemies_pos.robot_pos_3.tostring())
      buff.write(self.enemies_pos.robot_pos_4.tostring())
      buff.write(self.enemies_pos.robot_pos_5.tostring())
      _x = self
      buff.write(_get_struct_5d().pack(_x.enemies_vector.robot_angle_vector_1, _x.enemies_vector.robot_angle_vector_2, _x.enemies_vector.robot_angle_vector_3, _x.enemies_vector.robot_angle_vector_4, _x.enemies_vector.robot_angle_vector_5))
      buff.write(self.robot_speed.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.team_pos is None:
        self.team_pos = verysmall.msg.five_robot_pos()
      if self.team_vector is None:
        self.team_vector = verysmall.msg.five_robot_vector()
      if self.enemies_pos is None:
        self.enemies_pos = verysmall.msg.five_robot_pos()
      if self.enemies_vector is None:
        self.enemies_vector = verysmall.msg.five_robot_vector()
      end = 0
      start = end
      end += 8
      self.ball_pos = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      start = end
      end += 16
      self.ball_vector = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 8
      self.team_pos.robot_pos_1 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      start = end
      end += 8
      self.team_pos.robot_pos_2 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      start = end
      end += 8
      self.team_pos.robot_pos_3 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      start = end
      end += 8
      self.team_pos.robot_pos_4 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      start = end
      end += 8
      self.team_pos.robot_pos_5 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      _x = self
      start = end
      end += 40
      (_x.team_vector.robot_angle_vector_1, _x.team_vector.robot_angle_vector_2, _x.team_vector.robot_angle_vector_3, _x.team_vector.robot_angle_vector_4, _x.team_vector.robot_angle_vector_5,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 8
      self.enemies_pos.robot_pos_1 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      start = end
      end += 8
      self.enemies_pos.robot_pos_2 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      start = end
      end += 8
      self.enemies_pos.robot_pos_3 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      start = end
      end += 8
      self.enemies_pos.robot_pos_4 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      start = end
      end += 8
      self.enemies_pos.robot_pos_5 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      _x = self
      start = end
      end += 40
      (_x.enemies_vector.robot_angle_vector_1, _x.enemies_vector.robot_angle_vector_2, _x.enemies_vector.robot_angle_vector_3, _x.enemies_vector.robot_angle_vector_4, _x.enemies_vector.robot_angle_vector_5,) = _get_struct_5d().unpack(str[start:end])
      start = end
      end += 40
      self.robot_speed = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=10)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
_struct_10I = None
def _get_struct_10I():
    global _struct_10I
    if _struct_10I is None:
        _struct_10I = struct.Struct("<10I")
    return _struct_10I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
