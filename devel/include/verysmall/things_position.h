// Generated by gencpp from file verysmall/things_position.msg
// DO NOT EDIT!


#ifndef VERYSMALL_MESSAGE_THINGS_POSITION_H
#define VERYSMALL_MESSAGE_THINGS_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <verysmall/five_robot_pos.h>
#include <verysmall/five_robot_vector.h>
#include <verysmall/five_robot_pos.h>
#include <verysmall/five_robot_vector.h>

namespace verysmall
{
template <class ContainerAllocator>
struct things_position_
{
  typedef things_position_<ContainerAllocator> Type;

  things_position_()
    : ball_pos()
    , ball_vector()
    , team_pos()
    , team_vector()
    , enemies_pos()
    , enemies_vector()
    , robot_speed()  {
      ball_pos.assign(0);

      ball_vector.assign(0.0);

      robot_speed.assign(0);
  }
  things_position_(const ContainerAllocator& _alloc)
    : ball_pos()
    , ball_vector()
    , team_pos(_alloc)
    , team_vector(_alloc)
    , enemies_pos(_alloc)
    , enemies_vector(_alloc)
    , robot_speed()  {
  (void)_alloc;
      ball_pos.assign(0);

      ball_vector.assign(0.0);

      robot_speed.assign(0);
  }



   typedef boost::array<uint32_t, 2>  _ball_pos_type;
  _ball_pos_type ball_pos;

   typedef boost::array<double, 2>  _ball_vector_type;
  _ball_vector_type ball_vector;

   typedef  ::verysmall::five_robot_pos_<ContainerAllocator>  _team_pos_type;
  _team_pos_type team_pos;

   typedef  ::verysmall::five_robot_vector_<ContainerAllocator>  _team_vector_type;
  _team_vector_type team_vector;

   typedef  ::verysmall::five_robot_pos_<ContainerAllocator>  _enemies_pos_type;
  _enemies_pos_type enemies_pos;

   typedef  ::verysmall::five_robot_vector_<ContainerAllocator>  _enemies_vector_type;
  _enemies_vector_type enemies_vector;

   typedef boost::array<uint32_t, 10>  _robot_speed_type;
  _robot_speed_type robot_speed;





  typedef boost::shared_ptr< ::verysmall::things_position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::verysmall::things_position_<ContainerAllocator> const> ConstPtr;

}; // struct things_position_

typedef ::verysmall::things_position_<std::allocator<void> > things_position;

typedef boost::shared_ptr< ::verysmall::things_position > things_positionPtr;
typedef boost::shared_ptr< ::verysmall::things_position const> things_positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::verysmall::things_position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::verysmall::things_position_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace verysmall

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'verysmall': ['/home/marquesman/ararabots/src/verysmall/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::verysmall::things_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::verysmall::things_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::verysmall::things_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::verysmall::things_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::verysmall::things_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::verysmall::things_position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::verysmall::things_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e53313ec081a9c87ca55fbeaff276969";
  }

  static const char* value(const ::verysmall::things_position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe53313ec081a9c87ULL;
  static const uint64_t static_value2 = 0xca55fbeaff276969ULL;
};

template<class ContainerAllocator>
struct DataType< ::verysmall::things_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "verysmall/things_position";
  }

  static const char* value(const ::verysmall::things_position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::verysmall::things_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32[2]		 	        	ball_pos\n\
float64[2]        				ball_vector\n\
verysmall/five_robot_pos       	team_pos\n\
verysmall/five_robot_vector    	team_vector\n\
verysmall/five_robot_pos       	enemies_pos\n\
verysmall/five_robot_vector   	enemies_vector\n\
uint32[10]		 	        	robot_speed\n\
\n\
================================================================================\n\
MSG: verysmall/five_robot_pos\n\
uint32[2]    robot_pos_1\n\
uint32[2]    robot_pos_2\n\
uint32[2]    robot_pos_3\n\
uint32[2]    robot_pos_4\n\
uint32[2]    robot_pos_5\n\
================================================================================\n\
MSG: verysmall/five_robot_vector\n\
float64   robot_angle_vector_1\n\
float64   robot_angle_vector_2\n\
float64   robot_angle_vector_3\n\
float64   robot_angle_vector_4\n\
float64   robot_angle_vector_5\n\
";
  }

  static const char* value(const ::verysmall::things_position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::verysmall::things_position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ball_pos);
      stream.next(m.ball_vector);
      stream.next(m.team_pos);
      stream.next(m.team_vector);
      stream.next(m.enemies_pos);
      stream.next(m.enemies_vector);
      stream.next(m.robot_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct things_position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::verysmall::things_position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::verysmall::things_position_<ContainerAllocator>& v)
  {
    s << indent << "ball_pos[]" << std::endl;
    for (size_t i = 0; i < v.ball_pos.size(); ++i)
    {
      s << indent << "  ball_pos[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.ball_pos[i]);
    }
    s << indent << "ball_vector[]" << std::endl;
    for (size_t i = 0; i < v.ball_vector.size(); ++i)
    {
      s << indent << "  ball_vector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ball_vector[i]);
    }
    s << indent << "team_pos: ";
    s << std::endl;
    Printer< ::verysmall::five_robot_pos_<ContainerAllocator> >::stream(s, indent + "  ", v.team_pos);
    s << indent << "team_vector: ";
    s << std::endl;
    Printer< ::verysmall::five_robot_vector_<ContainerAllocator> >::stream(s, indent + "  ", v.team_vector);
    s << indent << "enemies_pos: ";
    s << std::endl;
    Printer< ::verysmall::five_robot_pos_<ContainerAllocator> >::stream(s, indent + "  ", v.enemies_pos);
    s << indent << "enemies_vector: ";
    s << std::endl;
    Printer< ::verysmall::five_robot_vector_<ContainerAllocator> >::stream(s, indent + "  ", v.enemies_vector);
    s << indent << "robot_speed[]" << std::endl;
    for (size_t i = 0; i < v.robot_speed.size(); ++i)
    {
      s << indent << "  robot_speed[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.robot_speed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VERYSMALL_MESSAGE_THINGS_POSITION_H
